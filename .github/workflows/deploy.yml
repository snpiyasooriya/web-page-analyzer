name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: eu-central-1
  ECR_REGISTRY: 996661346692.dkr.ecr.eu-central-1.amazonaws.com
  REPOSITORY_NAME: web-page-analyzer
  GO_VERSION: '1.24'

permissions:
  contents: read
  id-token: write # Required for passwordless deployment to AWS

jobs:
  # Job 1: Lint and format Go code (runs on pull requests)
  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run Linters
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum
          golangci-lint run ./...
          test -z "$(gofmt -l .)"
          go vet ./...

  # Job 2: Run tests
  test:
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'pull_request' # Or always if you want tests on main too
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Go Tests
        run: |
          go mod download
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # Job 3: Build and Push Docker image to ECR (runs on main branch)
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::190911309896:role/GitHubActionRole # Use an IAM role for security
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Job 4: Deploy to ECS (runs on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::190911309896:role/GitHubActionRole # Use an IAM role for security
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition web-page-analyzer-task --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: webpage-analyzer-container
          image: ${{ needs.build-and-push.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: web-page-analyzer
          cluster: web-page-analyzer-prod
          wait-for-service-stability: true